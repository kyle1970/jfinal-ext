#+TITLE:     JFinal-Ext文档(v1.2)
#+AUTHOR:    Kid Zhou
#+EMAIL:     zhouleib1412@gmail.com.cn
#+DATE:      2012-12-17
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  zh_CN
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LATEX_CLASS: cn-article

* JFinal测试框架
  在非web环境下对jfinal组件进行单元测试
** Controller测试

*** 使用说明

  所有对Controller的测试必须继承ControllerTestCase,此类中方法说明如下
  | start               | 初始化测试用的Config      |
  | invoke              | 调用的url                 |
  | findAttrAfterInvoke | action调用之后getAttr的值 |
 
*** 示例代码 
#+BEGIN_SRC java
  public class TestRoute extends ControllerTestCase {
	@BeforeClass
	public static void init() throws Exception{
		start(new Config());
	}
	@Test
	public void testAController() throws Exception {
		invoke("/aa");
		assertEquals("zhoulei", findAttrAfterInvoke("name"));
		assertEquals(24, findAttrAfterInvoke("age"));
	}
	@Test
	public void testBController() throws Exception {
		invoke("/bb");
		assertEquals("zhoulei", findAttrAfterInvoke("name"));
		assertEquals(24, findAttrAfterInvoke("age"));
	}


}

#+END_SRC


* Plugin扩展
** 自定绑定表 AutoTableBindPlugin 
*** 简介
   扫描clsspath和lib中继承了model的类自动注册，可选择不同的命名规则自定映射表名，也可以在每一个model上用注解指定表名
*** AutoTableBindPlugin使用示例
****  基本使用
   AutoTableBindPlugin 继承自ActivitiRecordPlugin，所以如果你使用
   AutoTableBindPlugin则不用再使用ActivitiRecordPlugin。
   
   #+BEGIN_SRC java
	DruidPlugin druid = new DruidPlugin("jdbc:mysql://127.0.0.1/jfinal_demo", "root", "root");
	AutoTableBindPlugin atbp = new AutoTableBindPlugin(druid);
   
   #+END_SRC
   
  *记住一定要在启动atbp之前启动连接池的plugin
****  jar包扫描
   如果你需要载入jar包中的model，需要调用以下的api将jar包加入扫描
   #+BEGIN_SRC java
		atbp.addJar("modelInJar.jar");
		atbp.addJars("jar1,jar2");
   #+END_SRC
**** 表名风格INameStyle 配置
   一个model自动绑定的表明默认是该类的simpleClassname，如果需要用其他
   的命名风格，需要在构造函数中指定，如
   #+BEGIN_SRC java
     AutoTableBindPlugin atbp = new AutoTableBindPlugin(cp,SimpleNameStyles.LOWER);
   #+END_SRC
   
   SimpleNameStyles 中已有的命名风格以及映射的表明如下表：

   |              | DEFAULT | =FIRST_LOWER= | UP      | LOWER   | =UP_UNDERLINE= | =LOWER_UNDERLINE= |
   | DevInfo.java | DevInfo | devInfo       | DEVINFO | devinfo | =DEV_INFO=     | =dev_info=        |
  
   ParamNameStyles 含有构造参数的命名风格：
   |              | module(test)   | lowerModule(test) | upModule(test) | upUnderlineModule(test) | lowerUnderlineModule(test) |
   | DevInfo.java | =test_DevInfo= | =test_devinfo=    | =test_DEVINFO= | =test_DEV_INFO=         | =test_dev_info=            |
 
   
****  TableName 配置
   如果有Model到表的映射命名不符合规范需要单独配置，则在Model上加上
   TableName注解，属性说明如下：
   | tableName | 表名   |
   | pkName    | 外键名 |
   
** SqlInXmlPlugin 
*** 简介
    类似ibatis的在xml中管理sql.主要用于复杂的sql管理或者有dba的开发团
    队
*** 使用示例
 插件会扫描classpath根目录下以sql结尾的xml文件，如user-sql.xml，内容如
 下
#+BEGIN_SRC java
 <sqlGroup name="blog" >
       <sql id="findBlog">select * from blog</sql>
       <sql id="findUser">select * from user</sql>
 </sqlGroup>
#+END_SRC
插件会将name+id作为一个sql语句的唯一标识，
在java中获取该sql的方法为
SqlKit.sql("blog.findBlog")
** jms消息处理 JmsPlugin
*** 消息接收
如果你需要处理某个消息号对应的消息，需要实现com.jfinal.plugin.jms.ReceiveResolver
#+BEGIN_SRC java
public class AReceiveResolver implements ReceiveResolver {

	@Override
	public void resolve(Serializable objectMessage) throws Exception {
		System.out.println("AReceiveResolver");
	}

}

#+END_SRC
*** 消息发送
 - 示例 JmsKit.sendQueue("q1", new M(), "a");

 - 接口 public static boolean sendQueue(String queueName, Serializable
 message, String msgName)
 
 - 参数说明
    | queueName      | message        | msgName        |
    | 发送队列的名字 | 发送的消息对象 | 发送的消息名字 |

*** 配置文件说明
#+BEGIN_SRC java

################################
#          server info         #
################################
# jms服务器地址
serverUrl=tcp://localhost:61616
username=system
password=manager

################################
#          queue info          #
################################
# 发送的队列名字，用“，”号分隔
sendQueues=q1,q2

# 接受的队列的名字，用“，”号分隔
receiveQueues=q1,q3
# 队列q1上消息名字为a的消息号
queue.q1.a=10000
#接受到队列q1上消息名字为a的消息的时候调用的处理器
queue.q1.a.resolver=test.com.jfinal.plugin.jms.AReceiveResolver

queue.q1.b=20000
queue.q1.b.resolver=test.com.jfinal.plugin.jms.BReceiveResolver

################################
#          topic info          #
################################

sendTopics=t1,t2

receiveTopics=t1,t3
topic.t1.c=30000
topic.t1.c.resolver=test.com.jfinal.plugin.jms.CReceiveResolver

topic.t3.d=40000
topic.t3.d.resolver=test.com.jfinal.plugin.jms.DReceiveResolver
#+END_SRC

** 任务调度  QuartzPlugin Cron4jPlugin
  
*** 业务如何调度
**** QuartzPlugin 
需要进行的调度任务实现必须实现org.quartz.Job接口

**** Cron4jPlugin
需要进行的调度任务实现必须实现java.lang.Runnable接口
*** 如何加载配置
  插件默认加载classpath根目录下job.properties文件。
  如果需要加载指定的配置文件，需要在构造方法中传入参数
*** 配置文件说明
job.properties配置示例
#+BEGIN_SRC java
#JobA
a.job=test.com.jfinal.plugin.quzrtz.JobA
a.cron=*/5 * * * * ?
a.enable=true
#JobB
b.job=test.com.jfinal.plugin.quartz.JobB
b.cron=*/10 * * * * ?
b.enable=false
#+END_SRC
配置说明
job cron enable为配置关键字
a和b为任务的名字，仅作为标识，无其他用处。

| 任务名字.job    | 调度任务的类全名     |
| 任务名字.cron   | 调度任务的cron表达式 |
| 任务名字.enable | 调度任务是否启用     |
       
** ConfigPlugin
   分优先级加载配置文件
   在团队开发中如果自己有测试配置需要长期存在但是又不需要提交中心库的时候 
可以采用分级配置加载的策略。 如中心库中有config.properties这个配置，你可以创建 config-test.properties文件，配置相同的key，ConfigKit中的方法会优先加载 xx-test.properties文件。

***  如何加载配置

#+BEGIN_SRC java
	ConfigPlugin configPlugin = new ConfigPlugin();
		configPlugin.addResource(".*.properties");
#+END_SRC
addResource支持正则表达式
当我们加载config.properties时候会找config-test.properties一起加载.
***  配置说明
 如果我们加载了以下两个配置,下面的测试用列能通过,也就是说当*-test中同
 名的key优先读取.
config.properties
#+BEGIN_SRC java
name=aa
age=1
#+END_SRC

config-test.properties
#+BEGIN_SRC java
name=test
#+END_SRC

#+BEGIN_SRC java
	@Test
	public void testGetStr() throws InterruptedException {
		Assert.assertEquals("test",ConfigKit.getStr("name"));
		Assert.assertEquals(1,ConfigKit.getInt("age"));
	}
#+END_SRC




* Render扩展
** DwzRender
#+BEGIN_SRC java
       public void save() {
		Blog model = getModel(Blog.class);
		if (model.getInt("id") == null) {
			model.save();
		} else {
			model.update();
		}
		render(DwzRender.closeCurrentAndRefresh("pageBlog"));
	}

	public void edit() {
		int id = getParaToInt(0);
		Blog blog = Blog.dao.findById(id);
		if (id == -1) {
			blog = new Blog();
		} else if (blog == null) {
			render(DwzRender.error("该记录已被删除，请您先刷新列表"));
		}
		setAttr("blog", blog);
	}

	public void delete() {
		Blog.dao.deleteById(getParaToInt());
		render(DwzRender.success());
	}
#+END_SRC

** ExcelRender

   通过list数据生成excel,支持的数据类型为map ,record , model。

** CsvRender
   通过list数据生成csv,支持的数据类型为map ,record , model。
** AmChartsRender
新增AmChartsRener,对AmCharts报表工具进行了简单的封装

#+BEGIN_SRC java
       public void pie(){
		List<KeyLabel> pies = new ArrayList<KeyLabel>();
		KeyLabel e= new KeyLabel("java","111");
		pies.add(e);
		KeyLabel e2= new KeyLabel("c","11");
		pies.add(e2);
		render(AmChartsRender.pie(pies, "ampie.swf", "pie_settings.xml",500,500));
	}
	
	public void multiple(){
		List<String> data = new ArrayList<String>();
		data.add("10");
		data.add("11");
		data.add("12");
		data.add("13");
		data.add("14");
		List<String> data1 = new ArrayList<String>();
		data1.add("20");
		data1.add("21");
		data1.add("22");
		data1.add("23");
		data1.add("24");
		List<List<String>> list = new ArrayList<List<String>>();
		list.add(data);
		list.add(data1);
		List<String> series = new ArrayList<String>();
		series.add("1月");
		series.add("2月");
		series.add("3月");
		series.add("4月");
		series.add("5月");
		render(AmChartsRender.graph(list, series, "amline.swf", "line_settings.xml"));
	}
	public void simple(){
		List<String> data = new ArrayList<String>();
		data.add("10");
		data.add("11");
		data.add("12");
		data.add("13");
		data.add("14");
		List<String> series = new ArrayList<String>();
		series.add("1月");
		series.add("2月");
		series.add("3月");
		series.add("4月");
		series.add("5月");
		render(AmChartsRender.graph(data, series, "amline.swf", "line_settings.xml"));
	}public void pie(){
		List<KeyLabel> pies = new ArrayList<KeyLabel>();
		KeyLabel e= new KeyLabel("java","111");
		pies.add(e);
		KeyLabel e2= new KeyLabel("c","11");
		pies.add(e2);
		render(AmChartsRender.pie(pies, "ampie.swf", "pie_settings.xml",500,500));
	}
	
	public void multiple(){
		List<String> data = new ArrayList<String>();
		data.add("10");
		data.add("11");
		data.add("12");
		data.add("13");
		data.add("14");
		List<String> data1 = new ArrayList<String>();
		data1.add("20");
		data1.add("21");
		data1.add("22");
		data1.add("23");
		data1.add("24");
		List<List<String>> list = new ArrayList<List<String>>();
		list.add(data);
		list.add(data1);
		List<String> series = new ArrayList<String>();
		series.add("1月");
		series.add("2月");
		series.add("3月");
		series.add("4月");
		series.add("5月");
		render(AmChartsRender.graph(list, series, "amline.swf", "line_settings.xml"));
	}
	public void simple(){
		List<String> data = new ArrayList<String>();
		data.add("10");
		data.add("11");
		data.add("12");
		data.add("13");
		data.add("14");
		List<String> series = new ArrayList<String>();
		series.add("1月");
		series.add("2月");
		series.add("3月");
		series.add("4月");
		series.add("5月");
		render(AmChartsRender.graph(data, series, "amline.swf", "line_settings.xml"));
	}
#+END_SRC
** FreeMarkerXMLRender
利用freemaker生成xml




* 其他扩展
 
** AutoControllerRegist自动注册Route

*** 简介
   扫描clsspath和lib中继承了Route的类按照约定的规则自动注册，也可以在
   每一个Route上用注解配置
*** 示例代码
#+BEGIN_SRC java
    public void configRoute(Routes me) {
        AutoControllerRegist.regist(me);
    }
#+END_SRC
    如果我们有一个AController，以上代码则相当于
#+BEGIN_SRC java
   public void configRoute(Routes me) {
        me.add("/a",AController.class);
    }
#+END_SRC
默认的注册规则是截取类名Controller前的部分并首字母小写.

*** ControllerBind配置
    如果需要单独配置Route，需要在Controller上加上ControllerBind注解

    ControllerBind 注解，属性说明如下：
    | controllerKey | 访问某个 Controller 所需要的一个字符串 |
    | viewPath      | Controller 返回的视图的相对路径        |
  
* eclipse代码片段
 将jfinal-templates.xml导入eclipse的Preferences-java-Editor-Templates

** jfl
   在任何类中使用，生成logger
  
   #+BEGIN_SRC java
     protected final Logger logger = Logger.getLogger(getClass());
     protected final static Logger logger = Logger.getLogger(Object.class);
   #+END_SRC
** jfd
   在Model中使用，生成dao

   #+BEGIN_SRC java
     public final static Model dao = new Model();
   #+END_SRC
** jfld

   在需要打印日志的变量下面使用
   #+BEGIN_SRC java
     logger.debug("var :" + var);
   #+END_SRC
** jfli
   在需要打印日志的变量下面使用
   #+BEGIN_SRC java
     logger.info("var :" + var);
   #+END_SRC
** jfle
   在需要打印日志的变量下面使用
   #+BEGIN_SRC java
     logger.error("var :" + var);
   #+END_SRC
